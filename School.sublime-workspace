{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"exe",
				"exec_	(function)"
			],
			[
				"qw",
				"QWidget	(class)"
			],
			[
				"Qa",
				"QApplication	(class)"
			],
			[
				"main",
				"MainController	struct ʈ"
			],
			[
				"man",
				"MainController	struct ʈ"
			],
			[
				"con",
				"Controller	struct ʈ"
			],
			[
				"c",
				"Ctx	*context.Context ν"
			],
			[
				"f",
				"FP	[]string ν"
			],
			[
				"st",
				"StaticDir	map[string]string ν"
			],
			[
				"de",
				"NewDecoder	*json.Decoder ƒ"
			],
			[
				"im",
				"import	import (...) ʂ"
			],
			[
				"Ha",
				"Handlers	 ƒ"
			],
			[
				"p",
				"Params	map[string]string ʈ"
			],
			[
				"P",
				"Params	map[string]string ʈ"
			],
			[
				"ma",
				"martini	 package ρ"
			],
			[
				"fi",
				"FileInfo	interface ¡"
			],
			[
				"func",
				"func	Function"
			],
			[
				"F",
				"FileInfo	interface ¡"
			],
			[
				"pa",
				"pattern	string ν"
			],
			[
				"tr",
				"TrimRight	string ƒ"
			],
			[
				"prin",
				"Println	n int, err error ƒ"
			],
			[
				"trims",
				"TrimSuffix	string ƒ"
			],
			[
				"Prin",
				"Print	n int, err error ƒ"
			],
			[
				"GE",
				"Getenv	string ƒ"
			],
			[
				"std",
				"Stdout	io.Writer ν"
			],
			[
				"S",
				"Stdout	io.Writer ν"
			],
			[
				"get",
				"Getenv	string ƒ"
			],
			[
				"Print",
				"Println	n int, err error ƒ"
			],
			[
				"wifiRe",
				"wifiRegister(int fd, const char *ssid, const char *password)	int"
			],
			[
				"wifiis",
				"wifiIsRegister(int fd)	int"
			],
			[
				"wifi",
				"wifi_info	WIFI_INFO *"
			],
			[
				"pr",
				"printf	printf …"
			],
			[
				"SendFromF",
				"SendFromCmd(SOCKFD *c, const char *cmd)	int"
			],
			[
				"TA",
				"TARGET_MANUAL	macro"
			],
			[
				"n",
				"n"
			],
			[
				"getS",
				"getServerConfig(const char *file)	SERVER_CONFIG *"
			],
			[
				"node",
				"nodeEncode(int id)	char"
			],
			[
				"SEG",
				"SegmentLong	macro"
			],
			[
				"Hea",
				"HeaderIntoPackage(HEADER *h, const char *file)	void"
			],
			[
				"getT",
				"getTmpFilePath(const char *prefix)	char *"
			],
			[
				"seg",
				"SegmentNum	int"
			],
			[
				"HEA",
				"HEADER	typedef"
			],
			[
				"CT_",
				"CT_ServerCommand	macro"
			],
			[
				"res",
				"result	MYSQL_RES *"
			],
			[
				"mysql_fet",
				"mysql_fetch_row(MYSQL_RES *result)	MYSQL_ROW"
			],
			[
				"mysql_num",
				"mysql_num_rows(MYSQL_RES *res)	my_ulonglong"
			],
			[
				"Header",
				"HeaderFree(HEADER *h)	void"
			],
			[
				"HEADER",
				"HeaderLength	macro"
			],
			[
				"COMMAND",
				"COMMAND_TURN	macro"
			],
			[
				"SERVER",
				"SERVER_CONFIG_FILE	macro"
			],
			[
				"getConfig",
				"getConfigToInt(const char *filename, const char *attr, int *buffer)	int"
			],
			[
				"getconfig",
				"getConfigToChar(const char *filename, const char *attr, char *buffer)	int"
			],
			[
				"TMP",
				"TMP_FILE_LOCK	pthread_mutex_t"
			],
			[
				"FD",
				"FD_ISSET(fd, fdsetp)	macro"
			],
			[
				"time",
				"timeval	struct"
			],
			[
				"Server",
				"ServerAccept(SOCKFD *fd)	SOCKFD *"
			],
			[
				"getcon",
				"getConfigToInt(const char *filename, const char *attr, int *buffer)	int"
			],
			[
				"bea",
				"beagleboneType	int"
			],
			[
				"Heaer",
				"HeaderIntoPackage(HEADER *h, const char *file)	void"
			],
			[
				"server",
				"serverCommand	int"
			],
			[
				"RECV",
				"RECV_POOL	macro"
			],
			[
				"tv",
				"timeval	struct"
			],
			[
				"FDSET",
				"FD_SET(fd, fdsetp)	macro"
			],
			[
				"FD_SET",
				"FD_SET(fd, fdsetp)	macro"
			],
			[
				"fd",
				"fd_set	typedef"
			],
			[
				"WIFI",
				"WIFI_MATCH_CHAR	macro"
			],
			[
				"TRA",
				"TRANSFER_PACKAGE	typedef"
			],
			[
				"read",
				"read(int __fd, void *__buf, size_t __nbytes)	ssize_t"
			],
			[
				"Se",
				"SegmentID	char **"
			],
			[
				"Seg",
				"SegmentNum	int"
			],
			[
				"tmp",
				"tmp_buf	char *"
			],
			[
				"Av",
				"Active	int"
			],
			[
				"LIGHT",
				"LIGHT_STATUS_UNKNOWN	macro"
			],
			[
				"PARA",
				"PARA_TURN_75	macro"
			],
			[
				"cmd",
				"cmdfile	char *"
			],
			[
				"gen",
				"genStatusResult(CONFIG *c, char nodeStatus, char ledStatus)	char *"
			],
			[
				"NODE",
				"NODE_STATUS_NORMAL	macro"
			],
			[
				"LI",
				"LIGHT_STAUTS_BROKEN	macro"
			],
			[
				"led",
				"ledStatus	char"
			],
			[
				"LEDON",
				"LED_ON	macro"
			],
			[
				"LED",
				"LedStatus()	int"
			],
			[
				"DE",
				"DETECT_FILE	macro"
			],
			[
				"Led",
				"LedStatus()	int"
			],
			[
				"DES",
				"DESTINATION	typedef"
			],
			[
				"Send",
				"SendFromFile(SOCKFD *c, const char *file)	int"
			],
			[
				"fa",
				"failure_times	int"
			],
			[
				"tmpfi",
				"tmp_file_path	char *"
			],
			[
				"CMD",
				"CMD_FILE_LOCK	pthread_mutex_t"
			],
			[
				"pthm",
				"pthread_mutex_lock(pthread_mutex_t *__mutex)	int"
			],
			[
				"SEND",
				"SENDER_INFO	typedef"
			],
			[
				"Cle",
				"ClientSock(const char *ip, int port)	SOCKFD *"
			],
			[
				"L_",
				"L_tmpnam	macro"
			],
			[
				"SHUT",
				"SHUT_RDWR	macro"
			],
			[
				"pthreadcreate",
				"pthread_create(pthread_t *restrict __newthread, const pthread_attr_t *restrict __attr, void *(*__start_routine)(void *), void *restrict __arg)	int"
			],
			[
				"TRAs",
				"TRANSFER_PACKAGE	typedef"
			],
			[
				"send",
				"send(int __fd, const void *__buf, size_t __n, int __flags)	ssize_t"
			],
			[
				"recv",
				"recv(int __fd, void *__buf, size_t __n, int __flags)	ssize_t"
			],
			[
				"sec",
				"section_size	int"
			],
			[
				"fclose",
				"fclose(FILE *__stream)	int"
			],
			[
				"tmpf",
				"tmp_file_path	char *"
			],
			[
				"pthread",
				"pthread_t	typedef"
			],
			[
				"SE",
				"SEGMENT_ID_LIST	typedef"
			],
			[
				"getC",
				"getConfigToChar(const char *filename, const char *attr, char *buffer)	int"
			],
			[
				"inn",
				"inner_str_tmp2	char *"
			],
			[
				"inner",
				"inner_str_tmp	char *"
			],
			[
				"inner_strtmp",
				"inner_str_tmp2	char *"
			],
			[
				"pthreadm",
				"pthread_mutex_lock(pthread_mutex_t *__mutex)	int"
			],
			[
				"CONFIG",
				"CONFIG_FILE	macro"
			],
			[
				"SEE",
				"SEEK_SET	macro"
			],
			[
				"ID",
				"ID_Hex2Int(char *sid)	int"
			],
			[
				"getConf",
				"getConfigToChar(const char *filename, const char *attr, char *buffer)	int"
			],
			[
				"L",
				"LINE_LEN	macro"
			],
			[
				"getConfgi",
				"getConfigToInt(const char *filename, const char *attr, int *buffer)	int"
			],
			[
				"CT",
				"CT_ServerCommand	macro"
			],
			[
				"detect",
				"detect_timer	pthread_t"
			],
			[
				"connman",
				"connmanIPv4(const char *ip_mode, const char *ip, const char *netmask, const char *gateway)	void"
			],
			[
				"index",
				"IndexByte	int ƒ"
			],
			[
				"m",
				"package main	 ʂ"
			],
			[
				"open",
				"open(const char *__file, int __oflag, ...)	int"
			],
			[
				"print",
				"printf(const char *restrict __format, ...)	int"
			],
			[
				"pri",
				"Println	n int, err error ƒ"
			]
		]
	},
	"build_system": "",
	"command_palette":
	{
		"height": 400.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"update",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"setsyntax c",
				"Set Syntax: C"
			],
			[
				"syntax c",
				"Set Syntax: C"
			],
			[
				"sublimeclang",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"clang",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"bash",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"setc",
				"Set Syntax: C"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: Add Channel"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"setting",
				"Preferences: Settings - User"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 544.0
	},
	"console":
	{
		"height": 120.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/kametang/Project/School/Advanced Algorithm/ReadMe.md",
		"/home/kametang/.config/sublime-text-3/Packages/SublimePythonIDE/SublimePython.sublime-settings",
		"/home/kametang/GOLIB/src/local/sublime-quick/tests/default_test.go",
		"/home/kametang/GOLIB/src/local/sublime-quick/controllers/open_project.go",
		"/home/kametang/GOLIB/src/local/sublime-quick/conf/config.json",
		"/home/kametang/GOLIB/src/local/sublime-quick/sublime-quick.sublime-project",
		"/home/kametang/GOLIB/src/local/search/search",
		"/home/kametang/GOLIB/src/local/sublime-quick/main.go",
		"/home/kametang/Project/LSLCS/node_new/node.sublime-project\n",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/connection_handler.h",
		"/home/kametang/Project/LSLCS/node_new/server.c",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/sender.h",
		"/home/kametang/Project/LSLCS/node_new/lib/config.h",
		"/home/kametang/Project/LSLCS/node_new/config.conf",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/command.h",
		"/home/kametang/Project/LSLCS/node_new/lib/common.h",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/timer.h",
		"/home/kametang/Project/LSLCS/node_new/lib/basic/tmpfile.h",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/wifi.h",
		"/home/kametang/Project/LSLCS/node_new/lib/module/wifi.h",
		"/home/kametang/Project/LSLCS/node_new/lib/basic/debug.h",
		"/home/kametang/Project/LSLCS/node_new/Makefile",
		"/home/kametang/Project/LSLCS/node_new/tmp.c",
		"/home/kametang/Project/LSLCS/node_new/node.c",
		"/home/kametang/Project/LSLCS/node_new/converter.c",
		"/home/kametang/Project/LSLCS/node_new/lib/transfer.h",
		"/home/kametang/Project/LSLCS/node_new/lib/basic/config.h",
		"/home/kametang/Project/LSLCS/node_new/lib/basic/console.h",
		"/home/kametang/Project/LSLCS/node_new/lib/basic/file.h",
		"/home/kametang/Project/LSLCS/node_new/lib/driver/connman.h",
		"/home/kametang/Project/LSLCS/node_new/lib/driver/gpio.h",
		"/home/kametang/Project/LSLCS/node_new/lib/driver/uart.h",
		"/home/kametang/Project/LSLCS/node_new/lib/module/led.h",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/command/detect.h",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/command/enquire.h",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/command/turn.h",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/command/update.h",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/command/upgrade.h",
		"/home/kametang/Project/LSLCS/node_new/lib/mysql.h",
		"/home/kametang/Project/LSLCS/node_new/lib/network.h",
		"/home/kametang/Project/LSLCS/node_new/lib/result.h",
		"/home/kametang/Project/LSLCS/node_new/lib/tcp.h",
		"/home/kametang/Project/LSLCS/node_new/lib/package.h",
		"/home/kametang/Project/LSLCS/node_new/server_config.conf",
		"/home/kametang/Project/LSLCS/node_new/node.sublime-project",
		"/home/kametang/Project/LSLCS/node_new/lib/thread/led.h",
		"/home/kametang/Project/LSLCS/node_new/ReadMe.md",
		"/home/kametang/Project/LSLCS/node_new/transfer.h",
		"/home/kametang/Project/LSLCS/node_new/common.h",
		"/home/kametang/Project/LSLCS/node_new/package.h",
		"/home/kametang/Project/LSLCS/node_new/lib/network/connman.h",
		"/home/kametang/.config/sublime-text-3/Packages/User/SublimeClang.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/SublimeClang/SublimeClang.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/BracketHighlighter/bh_wrapping.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/User/bh_wrapping.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/Terminal/Terminal.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/User/Terminal.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/Terminal/Default (Linux).sublime-keymap",
		"/home/kametang/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/kametang/.config/sublime-text-3/Packages/User/SublimeCodeIntel.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/GoSublime/GoSublime.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/Emmet/Default (Linux).sublime-keymap",
		"/home/kametang/.config/sublime-text-3/Packages/Emmet/Emmet.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/User/bh_core.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/BracketHighlighter/Example.sublime-keymap",
		"/home/kametang/.config/sublime-text-3/Packages/BracketHighlighter/bh_core.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/AutoFileName/autofilename.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/AdvancedNewFile/Default (Linux).sublime-keymap",
		"/home/kametang/.config/sublime-text-3/Packages/User/AdvancedNewFile.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/AdvancedNewFile/AdvancedNewFile.sublime-settings",
		"/home/kametang/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/kametang/Downloads/untitled.c",
		"/home/kametang/.config/sublime-text-3/Packages/GoSublime/CHANGELOG.md"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Index",
			"ProjectController",
			"ST",
			"err",
			"test",
			"FIND_PATH",
			"strindg",
			"{\n",
			"name",
			"a",
			"cmd",
			"Stdout",
			"gopath",
			"Wifi",
			"Information",
			"printf",
			"free",
			";\n",
			"free",
			"NULL",
			"T",
			"query",
			"server_config",
			"node",
			",",
			"2s",
			"serverHandler",
			"NULL",
			"dest",
			"source",
			"fd",
			"TRANSFER_PACKAGE",
			"section_size",
			"_COMMAND_UPDATE_THREAD_",
			"cmd_detect",
			"_COMMAND_DETECT_THREAD_",
			"_WIFI_THREAD_",
			"NODE",
			"NODE_DISCONNECT",
			"LIGHT",
			"LIGHT_OFF",
			"COMMAND_DETECT",
			"0",
			"target",
			"source",
			"so",
			"L_tmpnam",
			"\n        ",
			"config_tmp_str",
			"inner_str_tmp",
			");\n",
			"0",
			"next",
			"lid",
			"<sid2>",
			"nid1",
			"segnum",
			"DEST",
			"NEXTLIST",
			";\n",
			"search_pattern",
			");\n",
			"RECV_POOL",
			"unsigned",
			"NodeType",
			"&",
			"n",
			"int n",
			"char",
			"int",
			"300",
			"Zone",
			"tmpstr",
			"NULL",
			"timer",
			"wifi_thread",
			"wifiWaitRead",
			"recvpool",
			"RECV_POOL",
			"wifi_thrad",
			"NULL",
			"len",
			"LEDInitial",
			"Led",
			"ledGetStatus",
			"ledTurnOFF",
			"ledTurnON",
			"ledOpen",
			"void",
			"network",
			"fp",
			"value",
			"WIFI",
			"led",
			"WIFI",
			");\n",
			"_FUNCTION_CONFIG_",
			"_BASE_CONFIG_H_",
			"outString",
			"outOriginal",
			"status",
			"false",
			"true",
			"layman",
			"\"..................................................\"",
			"\"..........\"",
			"stippled",
			"squiggly",
			"outline",
			"false",
			"windows",
			"false"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"incremental_find":
	{
		"height": 42.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 162.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"d",
				"Advanced Algorithm/01/main.c"
			],
			[
				"ma",
				"main.py"
			],
			[
				"main",
				"main.py"
			],
			[
				"inde",
				"views/index.tpl"
			],
			[
				"sea",
				"search.go"
			],
			[
				"item",
				"item.go"
			],
			[
				"serer",
				"server.c"
			],
			[
				"connec",
				"lib/thread/connection_handler.h"
			],
			[
				"command",
				"lib/thread/command.h"
			],
			[
				"timer",
				"lib/thread/timer.h"
			],
			[
				"server",
				"server.c"
			],
			[
				"common",
				"lib/common.h"
			],
			[
				"wifi",
				"lib/thread/wifi.h"
			],
			[
				"node",
				"node.c"
			],
			[
				"config",
				"lib/config.h"
			],
			[
				"wif",
				"lib/thread/wifi.h"
			],
			[
				"m",
				"Makefile"
			],
			[
				"con",
				"lib/config.h"
			],
			[
				"conf",
				"config.conf"
			],
			[
				"pac",
				"lib/package.h"
			],
			[
				"cons",
				"lib/basic/console.h"
			],
			[
				"pak",
				"lib/package.h"
			],
			[
				"console",
				"lib/basic/console.h"
			],
			[
				"trans",
				"lib/transfer.h"
			],
			[
				"net",
				"lib/network.h"
			],
			[
				"tmp",
				"lib/basic/tmpfile.h"
			],
			[
				"tmpfile",
				"lib/basic/tmpfile.h"
			],
			[
				"tcp",
				"lib/tcp.h"
			],
			[
				"res",
				"lib/result.h"
			],
			[
				"conso",
				"lib/basic/console.h"
			],
			[
				"uar",
				"lib/driver/uart.h"
			],
			[
				"node.c",
				"node.c"
			],
			[
				"uart",
				"lib/driver/uart.h"
			],
			[
				"c",
				"config.conf"
			],
			[
				"resu",
				"lib/result.h"
			],
			[
				"upg",
				"lib/thread/command/upgrade.h"
			],
			[
				"upda",
				"lib/thread/command/update.h"
			],
			[
				"upgra",
				"lib/thread/command/upgrade.h"
			],
			[
				"en",
				"lib/thread/command/enquire.h"
			],
			[
				"turn",
				"lib/thread/command/turn.h"
			],
			[
				"commo",
				"lib/common.h"
			],
			[
				"conn",
				"lib/thread/connection_handler.h"
			],
			[
				"sender",
				"lib/thread/sender.h"
			],
			[
				"gpio",
				"lib/driver/gpio.h"
			],
			[
				"led",
				"lib/module/led.h"
			],
			[
				"detect",
				"lib/thread/command/detect.h"
			],
			[
				"package",
				"lib/package.h"
			],
			[
				"packa",
				"lib/package.h"
			],
			[
				"pakc",
				"lib/package.h"
			],
			[
				"conne",
				"lib/thread/connection_handler.h"
			],
			[
				"send",
				"lib/thread/sender.h"
			],
			[
				"confi",
				"config.conf"
			],
			[
				"pack",
				"lib/package.h"
			],
			[
				"config.conf",
				"config.conf"
			],
			[
				"noc",
				"node.c"
			],
			[
				"ndoe",
				"node.c"
			],
			[
				"no",
				"node.c"
			],
			[
				"bas",
				"lib/basic/config.h"
			],
			[
				"lib",
				"lib/config.h"
			],
			[
				"au",
				"auto-adjust.go"
			],
			[
				"mo",
				"mouse-toggle.go"
			],
			[
				"a",
				"auto-adjust.go"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
